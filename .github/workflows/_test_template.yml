name: ~test template

on:
  workflow_call:
    inputs:
      RUNNER:
        type: string
        description: Runner to use for test
        required: true
      TIMEOUT:
        type: number
        description: Max runtime of test in minutes
        required: false
        default: 10
      SCRIPT:
        type: string
        description: Test script to execute
        required: true
      AFTER_SCRIPT:
        type: string
        description: Script to run after main test
        required: false
        default: ":"
      IS_OPTIONAL:
        type: boolean
        description: Failure will cancel all other tests if set to true
        required: false
        default: false
      SAVE_COVERAGE_REPORT:
        type: boolean
        description: Upload .coverage file
        required: false
        default: false
    outputs:
      conclusion:
        description: Conclusion of main test step
        value: ${{ jobs.main.outputs.conclusion }}
      log:
        description: Last 2000 characters of the test step's log
        value: ${{ jobs.main.outputs.log }} 
      potential_infra_failure:
        description: Boolean flag when infra-related keyword spotted in logs.
        value: ${{ jobs.main.outputs.potential_infra_failure }}
      coverage_report:
        description: Key of coverage_report artifact
        value: ${{ jobs.main.outputs.coverage_report }}
jobs:
  
  main:
    runs-on: ${{ inputs.RUNNER }} 
    outputs:
      conclusion: ${{ steps.main.conclusion }}
      log: ${{ steps.main.outputs.log }}
      potential_infra_failure: ${{ steps.main.outputs.potential_infra_failure }}
      coverage_report: ${{ steps.main.outputs.coverage_report }}
    steps:
        - name: Docker system cleanup
          run: |
            docker system prune -af --filter "until=24h" --force || true

        - name: Docker pull image
          run: |
            docker pull nemoci.azurecr.io/nemo_container:${{ github.run_id }}

        - name: Start container
          run: |
            ARG=("")
            if [[ "${{ inputs.RUNNER }}" != *cpu* ]]; then
              ARG=("--runtime=nvidia --gpus all")
            fi

            docker run \
              --rm \
              -d \
              --name nemo_container_${{ github.run_id }} ${ARG[@]} \
              --shm-size=64g \
              --env TRANSFORMERS_OFFLINE=0 \
              --env HYDRA_FULL_ERROR=1 \
              --env HF_HOME=/home/TestData/HF_HOME \
              --volume /mnt/datadrive/TestData:/home/TestData nemoci.azurecr.io/nemo_container:${{ github.run_id }} \
              bash -c "sleep $(( ${{ inputs.TIMEOUT }} * 60 + 60 ))"

        - id: main
          name: Run main script
          timeout-minutes: ${{ inputs.TIMEOUT }}
          run: |
            mkdir -p ${{ github.run_id }}
            cd ${{ github.run_id }}/
            rm .coverage || true
            set +e 
            (  
              set -e

              docker exec nemo_container_${{ github.run_id }} bash -c '${{ inputs.SCRIPT }}'
            ) 2> >(tee err.log)

            EXIT_CODE=$?

            set -x

            log=$(tail -c 2000 err.log |  base64 -w 0)
            echo "log=$log" >> "$GITHUB_OUTPUT"
            
            potential_infra_failure=$(cat err.log | grep -Eqiw "device" && echo true || echo false)
            echo "potential_infra_failure=$potential_infra_failure" >> "$GITHUB_OUTPUT"

            coverage_report=coverage-${{ github.run_id }}-$(uuidgen)
            echo "coverage_report=$coverage_report" >> "$GITHUB_OUTPUT"

            docker exec nemo_container_${{ github.run_id }} bash -c 'ls -al'
            docker cp nemo_container_${{ github.run_id }}:/workspace/.coverage .coverage 

            exit $EXIT_CODE
        
        - name: Upload artifacts
          uses: actions/upload-artifact@v4
          if: inputs.SAVE_COVERAGE_REPORT == true
          with:
            name: ${{ steps.main.outputs.coverage_report }}
            path: ${{ github.run_id }}/.coverage
            include-hidden-files: true
            
        - uses: "NVIDIA/NeMo/.github/actions/cancel-workflow@main"
          if: failure() && inputs.IS_OPTIONAL == false && !contains(github.event.pull_request.labels.*.name, 'no-fail-fast')
        - name: after_script
          if: always() && inputs.AFTER_SCRIPT != ':'
          run: |
            docker exec nemo_container_${{ github.run_id }} bash -c '${{ inputs.AFTER_SCRIPT }}'

        - name: Container shutdown
          if: always()
          run: |
            docker container stop nemo_container_${{ github.run_id }} || true
            docker container rm nemo_container_${{ github.run_id }} || true
